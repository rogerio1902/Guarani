/***************************/
/* Teste admissional       */
/* Versão do Firebird: 2.5 */
/***************************/

/*** Criação do banco ***/

SET SQL DIALECT 3;

SET NAMES WIN1252;

CREATE DATABASE 'C:\Programa\Teste admissional_Guarani\Banco\Guarani.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
DEFAULT CHARACTER SET WIN1252 COLLATION Win_PTBR; /* Permite pesquisar e ordenar ignorando acentuação e cedilha */

/*** Geradores ***/

CREATE GENERATOR GEN_CLIENTES_ID;
CREATE GENERATOR GEN_PRODUTOS_ID;
CREATE GENERATOR GEN_MARCAS_ID;
CREATE GENERATOR GEN_PEDIDOS_ID;
SET GENERATOR GEN_CLIENTES_ID TO 7;
/*** Tabelas ***/

CREATE TABLE CLIENTES (
    ID            INTEGER NOT NULL PRIMARY KEY,
    DATACADASTRO  DATE,
    RAZAO         VARCHAR(45),
    FANTASIA      VARCHAR(45),
    CNPJ          VARCHAR(20),
    EMAIL         VARCHAR(40),
    TELEFONE      VARCHAR(20),
    CELULAR       VARCHAR(20),
    ENDERECO      VARCHAR(60),
    NUMERO        VARCHAR(8),
    COMPLEMENTO   VARCHAR(20),
    BAIRRO        VARCHAR(40),
    CIDADE        VARCHAR(35),
    UF            VARCHAR(2),
    CEP           VARCHAR(9)
);

CREATE TABLE MARCAS (
    ID        INTEGER NOT NULL PRIMARY KEY,
    DESCRICAO VARCHAR(20)
);

CREATE TABLE PRODUTOS (
    ID        INTEGER NOT NULL PRIMARY KEY,
    DESCRICAO VARCHAR(45),
    MARID     INTEGER REFERENCES MARCAS(ID) ON DELETE SET NULL ON UPDATE CASCADE,
    PRECO     DECIMAL(12, 2)
);

CREATE TABLE PEDIDOS (
    ID         INTEGER NOT NULL PRIMARY KEY,
    CLIID      INTEGER NOT NULL REFERENCES CLIENTES(ID) ON DELETE SET NULL ON UPDATE CASCADE,
    DATAPEDIDO TIMESTAMP
);

CREATE TABLE ITENSPEDIDOS (
    PEDID      INTEGER NOT NULL REFERENCES PEDIDOS (ID) ON DELETE CASCADE  ON UPDATE CASCADE,
    PROID      INTEGER NOT NULL REFERENCES PRODUTOS(ID) ON DELETE SET NULL ON UPDATE CASCADE,
    PRECO      DECIMAL(12, 2),
    QUANTIDADE INTEGER
);

/*** Visões ***/

CREATE VIEW VIS_CLIENTES
AS
SELECT
  C.Id,
  C.Razao        AS "RAZÃO SOCIAL",
  C.Fantasia     AS "FANTASIA",
  C.DataCadastro AS "DATA DE CADASTRO",
  C.Telefone,
  C.Celular,
  C.Email,
  C.Endereco     AS "ENDEREÇO",
  C.Numero       AS "NÚMERO",
  C.Complemento,
  C.Bairro,
  C.Cidade,
  C.UF,
  C.CEP
FROM CLIENTES C;

CREATE VIEW VIS_PRODUTOS
AS
SELECT
  P.Id,
  P.Descricao AS "DESCRIÇÃO",
  M.Descricao AS "MARCA",
  P.Preco     AS "PREÇO"
FROM PRODUTOS P
LEFT JOIN MARCAS M ON M.Id = P.MarId;

CREATE VIEW VIS_MARCAS
AS
SELECT
  M.Id,
  M.Descricao AS "DESCRIÇÃO"
FROM MARCAS M;

/*** Preenche banco ***/

INSERT INTO CLIENTES (ID, DATACADASTRO, RAZAO, EMAIL, CNPJ, CELULAR, ENDERECO, NUMERO, COMPLEMENTO, BAIRRO, CIDADE, UF, CEP) VALUES (1, '2024-08-26', 'ROGÉRIO APARECIDO CLEMENTE', 'rogerio.aparecido.cl@gmail.com', '16460532819', '+55 (18) 99140-5454', 'RUA ALTAIR DE SENNA', '593', NULL, 'PARQUE CEDRAL', 'PRESIDENTE PRUDENTE', 'SP', '19067350');
INSERT INTO CLIENTES (ID, DATACADASTRO, RAZAO) VALUES (2, '2024-08-26', 'JOÃO TESTE');
INSERT INTO CLIENTES (ID, DATACADASTRO, RAZAO) VALUES (3, '2024-08-26', 'JOSÉ TESTE');
INSERT INTO CLIENTES (ID, DATACADASTRO, RAZAO) VALUES (4, '2024-08-26', 'MARIA TESTE');
INSERT INTO CLIENTES (ID, DATACADASTRO, RAZAO) VALUES (5, '2024-08-26', 'ALBERTO TESTE');
INSERT INTO CLIENTES (ID, DATACADASTRO, RAZAO) VALUES (6, '2024-08-26', 'ROBERTO TESTE');
INSERT INTO CLIENTES (ID, DATACADASTRO, RAZAO) VALUES (7, '2024-08-26', 'FRANCISCO TESTE');

/*** Gatilhos ***/

SET TERM ^ ;

CREATE TRIGGER TR_GERA_CLIENTES_ID FOR CLIENTES
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS
BEGIN
  IF (New.Id = 0) THEN
    UPDATE CLIENTES SET Id = Gen_Id(GEN_CLIENTES_ID, 1) WHERE Id = 0;
END^

CREATE TRIGGER TR_VERCLIENTES FOR CLIENTES
ACTIVE BEFORE INSERT OR UPDATE POSITION 1
AS
BEGIN
  IF (New.Id IS Null) THEN
    New.Id = 0;
  New.Razao       = Upper(New.Razao);
  New.Fantasia    = Upper(New.Fantasia);
  New.Endereco    = Upper(New.Endereco);
  New.Complemento = Upper(New.Complemento);
  New.Bairro      = Upper(New.Bairro);
  New.Cidade      = Upper(New.Cidade);
  New.UF          = Upper(New.UF);
END^

CREATE TRIGGER TR_GERA_PRODUTOS_ID FOR PRODUTOS
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS
BEGIN
  IF (New.Id = 0) THEN
    UPDATE PRODUTOS SET Id = Gen_Id(GEN_PRODUTOS_ID, 1) WHERE Id = 0;
END^

CREATE TRIGGER TR_VERPRODUTOS FOR PRODUTOS
ACTIVE BEFORE INSERT OR UPDATE POSITION 1
AS
BEGIN
  IF (New.Id IS Null) THEN
    New.Id = 0;
  New.Descricao = Upper(New.Descricao);
END^

CREATE TRIGGER TR_GERA_MARCAS_ID FOR MARCAS
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS
BEGIN
  IF (New.Id = 0) THEN
    UPDATE MARCAS SET Id = Gen_Id(GEN_MARCAS_ID, 1) WHERE Id = 0;
END^

CREATE TRIGGER TR_VERMARCAS FOR MARCAS
ACTIVE BEFORE INSERT OR UPDATE POSITION 1
AS
BEGIN
  if (New.Id IS Null) THEN
    New.Id = 0;
  New.Descricao = Upper(New.Descricao);
END^

CREATE TRIGGER TR_GERA_PEDIDOS_ID FOR PEDIDOS
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS
BEGIN
  IF (New.Id = 0) THEN
    UPDATE PEDIDOS SET Id = Gen_Id(GEN_PEDIDOS_ID, 1) WHERE Id = 0;
END^

SET TERM ; ^
